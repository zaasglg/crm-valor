<!DOCTYPE html>
<html>
<head>
    <title>Админ панель</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; min-height: 100vh; }
        .container { background: white; border-radius: 8px; padding: 30px; border: 1px solid #ddd; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 1px solid #ddd; }
        .header h1 { color: #333; margin: 0; font-size: 24px; font-weight: 500; }
        .btn { padding: 10px 20px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; text-decoration: none; display: inline-block; margin-left: 10px; }
        .btn:hover { opacity: 0.9; }
        .btn-danger { background: #e74c3c; }
        .btn-danger:hover { opacity: 0.9; }
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #333; }
        .form-group input, .form-group select { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; box-sizing: border-box; }
        .form-group input:focus, .form-group select:focus { outline: none; border-color: #3498db; }
        .users-table { width: 100%; border-collapse: collapse; margin-top: 20px; border: 1px solid #ddd; }
        .users-table th, .users-table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        .users-table th { background: #3498db; color: white; font-weight: 500; }
        .users-table tr:hover { background: #f8f9fa; }
        .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); }
        .modal-content { background: white; margin: 10% auto; padding: 30px; border-radius: 8px; width: 400px; border: 1px solid #ddd; }
        .modal-content h2 { margin-top: 0; color: #333; font-size: 24px; }
        .close { float: right; font-size: 28px; font-weight: bold; cursor: pointer; color: #999; transition: color 0.3s ease; }
        .close:hover { color: #333; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Админ панель</h1>
            <div>
                <button class="btn" onclick="openModal()">Добавить сотрудника</button>
                <a href="/" class="btn">К чатам</a>
            </div>
        </div>

    <table class="users-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Логин</th>
                <th>Роль</th>
                <th>Статус</th>
                <th>Создан</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody id="users-list">
        </tbody>
    </table>

    <div style="margin-top: 40px; padding-top: 30px; border-top: 1px solid #ddd;">
        <h2>Настройки распределения чатов</h2>
        <div class="form-group">
            <label>Метод распределения:</label>
            <select id="distribution-method">
                <option value="round-robin">По очереди (Round-robin)</option>
                <option value="random">Случайно</option>
                <option value="by_load">По нагрузке (меньше занят)</option>
            </select>
        </div>
        <button class="btn" onclick="saveDistributionSettings()">Сохранить настройки</button>
        <div id="settings-status" style="margin-top: 10px; color: #666;"></div>
    </div>

    <div style="margin-top: 40px; padding-top: 30px; border-top: 1px solid #ddd;">
        <h2>Активные ФД-менеджеры</h2>
        <div id="fd-managers-list" style="margin-top: 20px;"></div>
    </div>
        <div class="form-group">
            <label>Сообщение для рассылки:</label>
            <textarea id="broadcast-message" placeholder="Введите текст сообщения..." style="width: 100%; min-height: 100px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; resize: vertical; box-sizing: border-box;"></textarea>
        </div>
        <div style="margin-top: 15px;">
            <button class="btn" onclick="sendBroadcast()">Отправить всем клиентам</button>
            <span id="broadcast-status" style="margin-left: 15px; color: #666;"></span>
        </div>
    </div>

    <div id="userModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Добавить сотрудника</h2>
            <form id="userForm">
                <div class="form-group">
                    <label>Логин:</label>
                    <input type="text" id="username" required>
                </div>
                <div class="form-group">
                    <label>Пароль:</label>
                    <input type="password" id="password" required>
                </div>
                <div class="form-group">
                    <label>Роль:</label>
                    <select id="role">
                        <option value="fd_manager">ФД-менеджер</option>
                        <option value="rd_manager">РД-менеджер</option>
                        <option value="admin">Админ</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>
                        <input type="checkbox" id="is_active" checked> Активен
                    </label>
                </div>
                <button type="submit" class="btn">Создать</button>
            </form>
        </div>
    </div>

    <script>
        // Проверка доступа
        const user = JSON.parse(localStorage.getItem('user') || 'null');
        if (!user || user.role !== 'admin') {
            alert('Доступ запрещен');
            window.location.href = '/';
        }
        
        let users = [];

        function loadUsers() {
            fetch('/api/users')
                .then(res => res.json())
                .then(data => {
                    users = data;
                    renderUsers();
                });
        }

        function renderUsers() {
            const tbody = document.getElementById('users-list');
            tbody.innerHTML = users.map(user => `
                <tr>
                    <td>${user.id}</td>
                    <td>${user.username}</td>
                    <td>${getRoleName(user.role)}</td>
                    <td>${user.is_active ? 'Активен' : 'Неактивен'}</td>
                    <td>${new Date(user.created_at).toLocaleString()}</td>
                    <td>
                        <button class="btn" onclick="editUser(${user.id})" style="background: #f39c12; margin-right: 5px;">Изменить</button>
                        <button class="btn btn-danger" onclick="deleteUser(${user.id})">Удалить</button>
                    </td>
                </tr>
            `).join('');
        }

        function getRoleName(role) {
            switch(role) {
                case 'admin': return 'Админ';
                case 'fd_manager': return 'ФД-менеджер';
                case 'rd_manager': return 'РД-менеджер';
                default: return 'Неизвестно';
            }
        }

        function openModal() {
            document.getElementById('userModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('userModal').style.display = 'none';
            document.getElementById('userForm').reset();
        }

        function deleteUser(id) {
            if (confirm('Удалить сотрудника?')) {
                fetch(`/api/users/${id}`, { method: 'DELETE' })
                    .then(() => loadUsers());
            }
        }

        document.getElementById('userForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const formData = {
                username: document.getElementById('username').value,
                password: document.getElementById('password').value,
                role: document.getElementById('role').value,
                is_active: document.getElementById('is_active').checked
            };

            fetch('/api/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            }).then(() => {
                closeModal();
                loadUsers();
                loadFdManagers();
            });
        });

        loadUsers();
        
        function sendBroadcast() {
            const message = document.getElementById('broadcast-message').value.trim();
            const statusEl = document.getElementById('broadcast-status');
            
            if (!message) {
                alert('Введите текст сообщения');
                return;
            }
            
            if (!confirm('Отправить сообщение всем клиентам?')) {
                return;
            }
            
            statusEl.textContent = 'Отправка...';
            statusEl.style.color = '#3498db';
            
            fetch('/api/broadcast', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: message })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    statusEl.textContent = `Отправлено ${data.sent} сообщений`;
                    statusEl.style.color = '#27ae60';
                    document.getElementById('broadcast-message').value = '';
                } else {
                    statusEl.textContent = 'Ошибка: ' + data.error;
                    statusEl.style.color = '#e74c3c';
                }
            })
            .catch(err => {
                statusEl.textContent = 'Ошибка отправки';
                statusEl.style.color = '#e74c3c';
            });
        }
        
        function loadDistributionSettings() {
            fetch('/api/settings/distribution_method')
                .then(res => res.json())
                .then(data => {
                    if (data.value) {
                        document.getElementById('distribution-method').value = data.value;
                    }
                })
                .catch(err => console.log('Settings not found, using defaults'));
        }
        
        function saveDistributionSettings() {
            const method = document.getElementById('distribution-method').value;
            const statusEl = document.getElementById('settings-status');
            
            statusEl.textContent = 'Сохранение...';
            statusEl.style.color = '#3498db';
            
            fetch('/api/settings/distribution_method', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(method)
            })
            .then(res => res.json())
            .then(data => {
                statusEl.textContent = 'Настройки сохранены';
                statusEl.style.color = '#27ae60';
                setTimeout(() => statusEl.textContent = '', 3000);
            })
            .catch(err => {
                statusEl.textContent = 'Ошибка сохранения';
                statusEl.style.color = '#e74c3c';
            });
        }
        
        function loadFdManagers() {
            fetch('/api/fd-managers')
                .then(res => res.json())
                .then(managers => {
                    const container = document.getElementById('fd-managers-list');
                    if (managers.length === 0) {
                        container.innerHTML = '<p>Нет активных ФД-менеджеров</p>';
                        return;
                    }
                    
                    container.innerHTML = `
                        <table class="users-table">
                            <thead>
                                <tr>
                                    <th>Логин</th>
                                    <th>Количество чатов</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${managers.map(manager => `
                                    <tr>
                                        <td>${manager.username}</td>
                                        <td id="load-${manager.username}">Загрузка...</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                    
                    // Загружаем нагрузку для каждого менеджера
                    managers.forEach(manager => {
                        fetch(`/api/manager-load/${manager.username}`)
                            .then(res => res.json())
                            .then(data => {
                                document.getElementById(`load-${manager.username}`).textContent = data.load || 0;
                            })
                            .catch(err => {
                                document.getElementById(`load-${manager.username}`).textContent = 'Ошибка';
                            });
                    });
                });
        }
        
        function editUser(id) {
            const user = users.find(u => u.id === id);
            if (!user) return;
            
            document.getElementById('username').value = user.username;
            document.getElementById('role').value = user.role;
            document.getElementById('is_active').checked = user.is_active;
            
            openModal();
            
            // Меняем обработчик формы для редактирования
            const form = document.getElementById('userForm');
            const originalHandler = form.onsubmit;
            
            form.onsubmit = function(e) {
                e.preventDefault();
                const formData = {
                    username: document.getElementById('username').value,
                    password: document.getElementById('password').value || user.password, // Если пароль не изменен
                    role: document.getElementById('role').value,
                    is_active: document.getElementById('is_active').checked
                };

                fetch(`/api/users/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                }).then(() => {
                    closeModal();
                    loadUsers();
                    loadFdManagers();
                    form.onsubmit = originalHandler; // Восстанавливаем оригинальный обработчик
                });
            };
        }
    </script>
    </div>
</body>
</html>
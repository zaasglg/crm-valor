<!DOCTYPE html>
<html>
<head>
    <title>Chat Clone</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; display: flex; height: 100vh; }
        .sidebar { width: 300px; background: #f5f5f5; border-right: 1px solid #ddd; overflow-y: auto; flex-shrink: 0; }
        .client-item { padding: 15px; border-bottom: 1px solid #eee; cursor: pointer; }
        .client-item:hover { background: #e9e9e9; }
        .client-item.active { background: #007bff; color: white; }
        .chat-area { flex: 1; display: flex; flex-direction: column; width: 100%; min-width: 0; }
        .messages { flex: 1; padding: 20px; overflow-y: auto; background: #fff; height: 100%; width: 100%; box-sizing: border-box; }
        .message { margin: 10px 0; padding: 10px; border-radius: 8px; max-width: 70%; }
        .message.in { background: #f1f1f1; align-self: flex-start; }
        .message.out { background: #007bff; color: white; align-self: flex-end; margin-left: auto; }
        .input-area { padding: 20px; border-top: 1px solid #ddd; display: flex; gap: 10px; width: 100%; box-sizing: border-box; }
        .input-area input { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 4px; width: 100%; box-sizing: border-box; }
        .input-area button, .input-area a.btn { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-left: 5px; text-decoration: none; }
        .input-area select { padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px; }
        .file-message { background: #e8f4fd; border: 1px solid #bee5eb; padding: 10px; border-radius: 8px; margin: 5px 0; }
        .file-link { color: #007bff; text-decoration: none; }
        .file-link:hover { text-decoration: underline; }
        .no-client { display: flex; align-items: center; justify-content: center; height: 100%; color: #666; }
        .header { padding: 15px; background: #f8f9fa; border-bottom: 1px solid #ddd; }
        .header .user-info { display: flex; flex-direction: column; gap: 8px; }
        .header .btn { padding: 5px 10px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; text-decoration: none; }
        .header .btn-danger { background: #dc3545; }
        .header .btn:hover { opacity: 0.8; }
    </style>
</head>
<body>
    <div style="display: flex; height: 100vh; width: 100vw;">
        <div class="sidebar">
            <div class="header">
                <div class="user-info">
                    <span id="username-display"></span>
                    <a href="/admin" class="btn" id="admin-btn" style="display: none;">–ê–¥–º–∏–Ω</a>
                    <button onclick="logout()" class="btn btn-danger">–í—ã—Ö–æ–¥</button>
                </div>
            </div>
            <div id="clients-list"></div>
        </div>
        <div class="chat-area">
            <div id="messages" class="messages"></div>
            <div class="input-area">

            <input type="text" id="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." disabled>
            <input type="file" id="file-input" style="display: none;" disabled>
            <button onclick="document.getElementById('file-input').click()" id="file-btn" disabled>üìÅ</button>
            <button onclick="sendMessage()" id="send-btn" disabled>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const user = JSON.parse(localStorage.getItem('user') || 'null');
        if (!user) {
            window.location.href = '/login';
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('username-display').textContent = user.username + ' (' + (user.role === 'admin' ? '–ê–¥–º–∏–Ω' : '–û–ø–µ—Ä–∞—Ç–æ—Ä') + ')';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (user.role === 'admin') {
            document.getElementById('admin-btn').style.display = 'inline-block';
        }
        
        function logout() {
            localStorage.removeItem('user');
            window.location.href = '/login';
        }
        const socket = io();
        let currentClientId = null;
        let clients = {};

        socket.on('new_message', (data) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç—É
            const hasAccess = user.role === 'admin' || 
                             data.client_assigned_to === user.username || 
                             !data.client_assigned_to;
            
            if (!hasAccess) return;
            
            if (!clients[data.client_id]) {
                clients[data.client_id] = { 
                    id: data.client_id, 
                    name: data.client_name, 
                    assigned_to: data.client_assigned_to,
                    messages: [] 
                };
                renderClients();
            }
            if (!clients[data.client_id].messages) {
                clients[data.client_id].messages = [];
            }
            clients[data.client_id].messages.push(data.message);
            if (currentClientId === data.client_id) {
                renderMessages();
            }
        });

        function selectClient(clientId) {
            currentClientId = clientId;
            document.querySelectorAll('.client-item').forEach(el => el.classList.remove('active'));
            document.querySelector(`[data-client-id="${clientId}"]`).classList.add('active');
            document.getElementById('message-input').disabled = false;
            document.getElementById('send-btn').disabled = false;
            document.getElementById('file-input').disabled = false;
            document.getElementById('file-btn').disabled = false;
            loadMessages(clientId);
        }

        function loadMessages(clientId) {
            fetch(`/api/messages/${clientId}`)
                .then(res => res.json())
                .then(messages => {
                    if (Array.isArray(messages)) {
                        clients[clientId].messages = messages;
                    } else {
                        clients[clientId].messages = [];
                    }
                    renderMessages();
                }).catch(err => {
                    console.error('Error loading messages:', err);
                    clients[clientId].messages = [];
                    renderMessages();
                });
        }

        function renderMessages() {
            const container = document.getElementById('messages');
            if (!currentClientId) {
                container.innerHTML = '<div class="no-client">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞</div>';
                return;
            }
            const messages = clients[currentClientId]?.messages || [];
            if (Array.isArray(messages)) {
                container.innerHTML = messages.map(msg => {
                    let content = msg.text || '';
                    if (msg.file_url) {
                        content += `<br><a href="${msg.file_url}" class="file-link" target="_blank">üìÅ ${msg.file_name}</a>`;
                    }
                    return `<div class="message ${msg.direction}">
                        <div>${content}</div>
                        <small>${new Date(msg.created_at).toLocaleString()}</small>
                    </div>`;
                }).join('');
            } else {
                container.innerHTML = '';
            }
            container.scrollTop = container.scrollHeight;
        }

        function renderClients() {
            const container = document.getElementById('clients-list');
            container.innerHTML = Object.values(clients).map(client => 
                `<div class="client-item" data-client-id="${client.id}" onclick="selectClient(${client.id})">
                    <strong>${client.name}</strong>
                    <div>Telegram</div>
                    ${client.assigned_to ? `<small>–ù–∞–∑–Ω–∞—á–µ–Ω: ${client.assigned_to}</small>` : ''}
                    ${user.role === 'admin' ? `<button onclick="assignClient(${client.id})" style="margin-top: 5px; padding: 2px 8px; font-size: 12px; background: #28a745; color: white; border: none; border-radius: 3px; cursor: pointer;">–ù–∞–∑–Ω–∞—á–∏—Ç—å</button>` : ''}
                </div>`
            ).join('');
        }

        function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            if (!text || !currentClientId) return;

            fetch('/api/send', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ client_id: currentClientId, text, operator: user.username })
            }).then(() => {
                input.value = '';
                loadMessages(currentClientId);
            });
        }

        document.getElementById('message-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        document.getElementById('file-input').addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file && currentClientId) {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('client_id', currentClientId);
                formData.append('operator', user.username);

                fetch('/api/send-file', {
                    method: 'POST',
                    body: formData
                }).then(() => {
                    e.target.value = '';
                    loadMessages(currentClientId);
                });
            }
        });



        function assignClient(clientId) {
            fetch('/api/users')
                .then(res => res.json())
                .then(users => {
                    const operators = users.filter(u => u.role === 'operator');
                    const select = document.createElement('select');
                    select.innerHTML = '<option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>' + 
                        operators.map(u => `<option value="${u.username}">${u.username}</option>`).join('');
                    
                    const modal = document.createElement('div');
                    modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1000;';
                    modal.innerHTML = `
                        <div style="background: white; padding: 20px; border-radius: 8px; min-width: 300px;">
                            <h3>–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</h3>
                            <div style="margin: 15px 0;">${select.outerHTML}</div>
                            <button onclick="confirmAssign()" style="padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 4px; margin-right: 10px; cursor: pointer;">–ù–∞–∑–Ω–∞—á–∏—Ç—å</button>
                            <button onclick="closeAssignModal()" style="padding: 8px 16px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    `;
                    
                    document.body.appendChild(modal);
                    
                    window.confirmAssign = () => {
                        const selectedOperator = modal.querySelector('select').value;
                        fetch('/api/assign-client', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ client_id: clientId, operator: selectedOperator || null })
                        }).then(() => {
                            clients[clientId].assigned_to = selectedOperator || null;
                            renderClients();
                            closeAssignModal();
                        });
                    };
                    
                    window.closeAssignModal = () => {
                        document.body.removeChild(modal);
                    };
                });
        }

        // Load initial clients
        fetch('/api/clients')
            .then(res => res.json())
            .then(data => {
                if (Array.isArray(data)) {
                    data.forEach(client => {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                        // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
                        // 2. –ö–ª–∏–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        // 3. –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏–∫–æ–º—É
                        if (user.role === 'admin' || 
                            client.assigned_to === user.username || 
                            !client.assigned_to) {
                            clients[client.id] = client;
                        }
                    });
                }
                renderClients();
                renderMessages();
            }).catch(err => {
                console.error('Error loading clients:', err);
                renderClients();
                renderMessages();
            });
    </script>
</body>
</html>
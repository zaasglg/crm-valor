<!DOCTYPE html>
<html>
<head>
    <title>Chat Clone</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; display: flex; height: 100vh; background: #f5f5f5; }
        .sidebar { width: 300px; background: #2c3e50; border-right: none; overflow-y: auto; flex-shrink: 0; }
        .client-item { padding: 15px; border-bottom: 1px solid #3c4f66; cursor: pointer; color: white; }
        .client-item:hover { background: #34495e; }
        .client-item.active { background: #3498db; }
        .client-item strong { font-size: 14px; display: block; margin-bottom: 4px; }
        .client-item > div:nth-child(2) { font-size: 12px; opacity: 0.8; margin-bottom: 8px; }
        .client-item small { font-size: 11px; opacity: 0.7; display: block; margin-bottom: 8px; }
        .chat-area { flex: 1; display: flex; flex-direction: column; width: 100%; min-width: 0; background: white; }
        .chat-header { padding: 15px 20px; background: white; border-bottom: 1px solid #ddd; cursor: pointer; display: none; }
        .chat-header:hover { background: #f8f9fa; }
        .chat-header-info { display: flex; align-items: center; gap: 12px; }
        .chat-avatar { width: 40px; height: 40px; border-radius: 50%; background: #00a884; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 16px; }
        .chat-user-details h3 { margin: 0; font-size: 16px; color: #111b21; font-weight: 500; }
        .chat-user-details p { margin: 2px 0 0 0; font-size: 13px; color: #667781; }
        .online-indicator { width: 8px; height: 8px; background: #00a884; border-radius: 50%; margin-left: auto; }
        
        /* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: none; z-index: 1000; }
        .modal-content { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; width: 90%; max-width: 500px; max-height: 80vh; overflow-y: auto; }
        .modal-header { background: #3498db; color: white; padding: 20px; border-radius: 8px 8px 0 0; display: flex; justify-content: space-between; align-items: center; }
        .modal-close { background: none; border: none; color: white; font-size: 24px; cursor: pointer; padding: 0; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; }
        .modal-close:hover { opacity: 0.8; }
        .modal-body { padding: 20px !important; }
        .user-profile { display: flex; align-items: center; gap: 15px; margin-bottom: 20px; }
        .user-avatar-large { width: 50px; height: 50px; border-radius: 50%; background: #3498db; display: flex; align-items: center; justify-content: center; color: white; font-size: 20px; font-weight: 500; }
        .user-info-modal h2 { margin: 0; font-size: 20px; color: #111b21; }
        .user-info-modal p { margin: 5px 0 0 0; color: #667781; font-size: 14px; }
        .stats-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin: 20px 0; }
        .stat-item { text-align: center; padding: 15px; background: #f8f9fa; border-radius: 4px; border: 1px solid #ddd; }
        .stat-number { font-size: 20px; font-weight: 500; color: #3498db; }
        .stat-label { font-size: 12px; color: #667781; margin-top: 5px; }
        .info-section { margin: 20px 0; }
        .info-section h3 { margin: 0 0 15px 0; font-size: 16px; color: #111b21; }
        .info-item { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #f0f2f5; }
        .info-item:last-child { border-bottom: none; }
        .info-item-label { color: #667781; font-size: 14px; }
        .info-item-value { color: #111b21; font-size: 14px; font-weight: 500; }
        .recent-messages { max-height: 200px; overflow-y: auto; }
        .message-preview { padding: 10px; background: #f0f2f5; border-radius: 8px; margin: 8px 0; font-size: 13px; }
        .message-preview-meta { color: #667781; font-size: 11px; margin-bottom: 3px; }
        .message-preview-text { color: #111b21; }
        .messages { flex: 1; padding: 20px; overflow-y: auto; background: #f5f5f5; height: 100%; width: 100%; box-sizing: border-box; }
        .message { margin: 10px 0; padding: 12px 16px; border-radius: 8px; max-width: 70%; }
        .message.in { background: white; align-self: flex-start; border: 1px solid #ddd; }
        .message.out { background: #3498db; color: white; align-self: flex-end; margin-left: auto; }
        .input-area { padding: 20px; border-top: 1px solid #ddd; display: flex; gap: 10px; width: 100%; box-sizing: border-box; background: white; }
        .input-area input { flex: 1; padding: 10px 15px; border: 1px solid #ddd; border-radius: 4px; width: 100%; box-sizing: border-box; font-size: 14px; }
        .input-area input:focus { outline: none; border-color: #3498db; }
        .input-area button, .input-area a.btn { padding: 10px 20px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; margin-left: 5px; text-decoration: none; }
        .input-area button:hover, .input-area a.btn:hover { opacity: 0.9; }
        .input-area select { padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px; }
        .file-message { background: #e8f4fd; border: 1px solid #bee5eb; padding: 10px; border-radius: 8px; margin: 5px 0; }
        .file-link { color: #007bff; text-decoration: none; }
        .file-link:hover { text-decoration: underline; }
        .no-client { display: flex; align-items: center; justify-content: center; height: 100%; color: #999; font-size: 18px; font-weight: 500; }
        .header { padding: 20px; background: #34495e; border-bottom: 1px solid #3c4f66; }
        .header .user-info { display: flex; flex-direction: column; gap: 12px; }
        .user-profile-section { display: flex; align-items: center; gap: 12px; margin-bottom: 15px; }
        .user-avatar-sidebar { width: 40px; height: 40px; border-radius: 50%; background: #3498db; display: flex; align-items: center; justify-content: center; color: white; font-size: 16px; font-weight: 500; }
        .user-details { flex: 1; }
        .user-name { color: white; font-size: 14px; font-weight: 500; margin: 0; }
        .user-role { color: #bdc3c7; font-size: 12px; margin: 2px 0 0 0; }
        .header .btn { padding: 8px 16px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; text-decoration: none; font-size: 12px; font-weight: 400; }
        .header .btn-danger { background: #e74c3c; }
        .header .btn:hover { opacity: 0.9; }
        .buttons-section { display: flex; gap: 8px; }
    </style>
</head>
<body>
    <div style="display: flex; height: 100vh; width: 100vw;">
        <div class="sidebar">
            <div class="header">
                <div class="user-info">
                    <div class="user-profile-section">
                        <div class="user-avatar-sidebar" id="user-avatar-sidebar">U</div>
                        <div class="user-details">
                            <h3 class="user-name" id="username-display"></h3>
                            <p class="user-role" id="user-role-display"></p>
                        </div>
                    </div>
                    <div class="buttons-section">
                        <a href="/admin" class="btn" id="admin-btn" style="display: none;">–ê–¥–º–∏–Ω</a>
                        <button onclick="logout()" class="btn btn-danger">–í—ã—Ö–æ–¥</button>
                    </div>
                </div>
            </div>
            <div id="clients-list"></div>
        </div>
        <div class="chat-area">
            <div class="chat-header" id="chat-header" onclick="openUserCard()">
                <div class="chat-header-info">
                    <div class="chat-avatar" id="chat-avatar">U</div>
                    <div class="chat-user-details">
                        <h3 id="chat-user-name">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
                        <p id="chat-user-status">Telegram</p>
                    </div>
                    <div class="online-indicator" id="online-indicator" style="display: none;"></div>
                </div>
            </div>
            <div id="messages" class="messages"></div>
            <div class="input-area">

            <input type="text" id="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." disabled>
            <input type="file" id="file-input" style="display: none;" disabled>
            <button onclick="document.getElementById('file-input').click()" id="file-btn" disabled>üìÅ</button>
            <button onclick="sendMessage()" id="send-btn" disabled>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
    <div class="modal-overlay" id="user-card-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
                <button class="modal-close" onclick="closeUserCardModal()">&times;</button>
            </div>
            <div id="modal-body" style="padding: 20px;">
                
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const user = JSON.parse(localStorage.getItem('user') || 'null');
        if (!user) {
            window.location.href = '/login';
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('username-display').textContent = user.username;
        document.getElementById('user-role-display').textContent = getRoleDisplayName(user.role);
        
        function getRoleDisplayName(role) {
            switch(role) {
                case 'admin': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
                case 'fd_manager': return '–§–î-–º–µ–Ω–µ–¥–∂–µ—Ä';
                case 'rd_manager': return '–†–î-–º–µ–Ω–µ–¥–∂–µ—Ä';
                default: return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAvatar = document.getElementById('user-avatar-sidebar');
        const userFirstLetter = user.username.charAt(0).toUpperCase();
        userAvatar.textContent = userFirstLetter;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (user.role === 'admin') {
            document.getElementById('admin-btn').style.display = 'inline-block';
        }
        
        function logout() {
            localStorage.removeItem('user');
            window.location.href = '/login';
        }
        const socket = io();
        let currentClientId = null;
        let clients = {};

        socket.on('new_message', (data) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç—É
            const hasAccess = user.role === 'admin' || 
                             (user.role === 'fd_manager' && (data.client_assigned_to === user.username || !data.client_assigned_to)) ||
                             (user.role === 'rd_manager' && data.client_assigned_to === user.username);
            
            if (!hasAccess) return;
            
            if (!clients[data.client_id]) {
                clients[data.client_id] = { 
                    id: data.client_id, 
                    name: data.client_name, 
                    assigned_to: data.client_assigned_to,
                    messages: [] 
                };
                renderClients();
            }
            if (!clients[data.client_id].messages) {
                clients[data.client_id].messages = [];
            }
            clients[data.client_id].messages.push(data.message);
            if (currentClientId === data.client_id) {
                renderMessages();
            }
        });

        function selectClient(clientId) {
            currentClientId = clientId;
            document.querySelectorAll('.client-item').forEach(el => el.classList.remove('active'));
            document.querySelector(`[data-client-id="${clientId}"]`).classList.add('active');
            document.getElementById('message-input').disabled = false;
            document.getElementById('send-btn').disabled = false;
            document.getElementById('file-input').disabled = false;
            document.getElementById('file-btn').disabled = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–ø–∫—É —á–∞—Ç–∞
            const client = clients[clientId];
            if (client) {
                document.getElementById('chat-header').style.display = 'block';
                document.getElementById('chat-user-name').textContent = client.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                let statusText = 'Telegram';
                if (client.assigned_to) {
                    statusText += ` ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω: ${client.assigned_to}`;
                }
                document.getElementById('chat-user-status').textContent = statusText;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
                const avatar = document.getElementById('chat-avatar');
                const firstLetter = (client.name || 'U').charAt(0).toUpperCase();
                avatar.textContent = firstLetter;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (—Å–∏–º—É–ª—è—Ü–∏—è)
                document.getElementById('online-indicator').style.display = 'block';
            }
            
            loadMessages(clientId);
        }

        function loadMessages(clientId) {
            fetch(`/api/messages/${clientId}`)
                .then(res => res.json())
                .then(messages => {
                    if (Array.isArray(messages)) {
                        clients[clientId].messages = messages;
                    } else {
                        clients[clientId].messages = [];
                    }
                    renderMessages();
                }).catch(err => {
                    console.error('Error loading messages:', err);
                    clients[clientId].messages = [];
                    renderMessages();
                });
        }

        function renderMessages() {
            const container = document.getElementById('messages');
            if (!currentClientId) {
                container.innerHTML = '<div class="no-client">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞</div>';
                document.getElementById('chat-header').style.display = 'none';
                return;
            }
            const messages = clients[currentClientId]?.messages || [];
            if (Array.isArray(messages)) {
                container.innerHTML = messages.map(msg => {
                    let content = msg.text || '';
                    if (msg.file_url) {
                        content += `<br><a href="${msg.file_url}" class="file-link" target="_blank">üìÅ ${msg.file_name}</a>`;
                    }
                    return `<div class="message ${msg.direction}">
                        <div>${content}</div>
                        <small>${new Date(msg.created_at).toLocaleString()}</small>
                    </div>`;
                }).join('');
            } else {
                container.innerHTML = '';
            }
            container.scrollTop = container.scrollHeight;
        }

        function renderClients() {
            const container = document.getElementById('clients-list');
            container.innerHTML = Object.values(clients).map(client => 
                `<div class="client-item" data-client-id="${client.id}" onclick="selectClient(${client.id})">
                    <strong>${client.name}</strong>
                    <div>Telegram</div>
                    ${client.assigned_to ? `<small>–ù–∞–∑–Ω–∞—á–µ–Ω: ${client.assigned_to}</small>` : ''}
                    <div style="margin-top: 8px; display: flex; gap: 5px;">
                        <button onclick="event.stopPropagation(); openUserCardModal(${client.id})" style="padding: 2px 8px; font-size: 12px; background: #007bff; color: white; border: none; border-radius: 3px; cursor: pointer;">üë§ –ö–∞—Ä—Ç–æ—á–∫–∞</button>
                        ${user.role === 'admin' ? `<button onclick="event.stopPropagation(); assignClient(${client.id})" style="padding: 2px 8px; font-size: 12px; background: #28a745; color: white; border: none; border-radius: 3px; cursor: pointer;">–ù–∞–∑–Ω–∞—á–∏—Ç—å</button>` : ''}
                    </div>
                </div>`
            ).join('');
        }

        function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            if (!text || !currentClientId) return;

            fetch('/api/send', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ client_id: currentClientId, text, operator: user.username })
            }).then(() => {
                input.value = '';
                loadMessages(currentClientId);
            });
        }

        document.getElementById('message-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        document.getElementById('file-input').addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file && currentClientId) {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('client_id', currentClientId);
                formData.append('operator', user.username);

                fetch('/api/send-file', {
                    method: 'POST',
                    body: formData
                }).then(() => {
                    e.target.value = '';
                    loadMessages(currentClientId);
                });
            }
        });



        function openUserCard() {
            if (currentClientId) {
                openUserCardModal(currentClientId);
            }
        }
        
        function openUserCardModal(clientId) {
            const modal = document.getElementById('user-card-modal');
            const modalBody = document.getElementById('modal-body');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª–∞
            fetch('/user-card-fragment')
                .then(res => res.text())
                .then(html => {
                    modalBody.innerHTML = html;
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                    fetch(`/api/clients`)
                        .then(res => res.json())
                        .then(clients => {
                            const client = clients.find(c => c.id == clientId);
                            if (client) {
                                document.getElementById('modal-user-name').textContent = client.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                                document.getElementById('modal-user-id').textContent = client.id;
                                document.getElementById('modal-external-id').textContent = client.external_id;
                                document.getElementById('modal-assigned-to').textContent = client.assigned_to || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
                                document.getElementById('modal-created-at').textContent = new Date(client.created_at).toLocaleString();
                                
                                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                                document.getElementById('modal-user-comment').value = client.comment || '';
                                
                                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                                const avatar = document.getElementById('modal-user-avatar');
                                const firstLetter = (client.name || 'U').charAt(0).toUpperCase();
                                avatar.textContent = firstLetter;
                            }
                        });
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                    fetch(`/api/messages/${clientId}`)
                        .then(res => res.json())
                        .then(messages => {
                            if (!Array.isArray(messages)) {
                                messages = [];
                            }
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            const totalMessages = messages.length;
                            const incomingMessages = messages.filter(m => m.direction === 'in').length;
                            const outgoingMessages = messages.filter(m => m.direction === 'out').length;
                            
                            document.getElementById('modal-total-messages').textContent = totalMessages;
                            document.getElementById('modal-incoming-messages').textContent = incomingMessages;
                            document.getElementById('modal-outgoing-messages').textContent = outgoingMessages;
                        });
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
                    modal.style.display = 'block';
                });
        }
        
        function closeUserCardModal() {
            const modal = document.getElementById('user-card-modal');
            modal.style.display = 'none';
        }
        
        function saveComment() {
            const commentTextarea = document.getElementById('modal-user-comment');
            const comment = commentTextarea.value.trim();
            const clientId = currentClientId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            
            if (!clientId) {
                alert('–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω');
                return;
            }
            
            fetch('/api/update-client-comment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ client_id: clientId, comment: comment })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
                    if (clients[clientId]) {
                        clients[clientId].comment = comment;
                    }
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
                }
            })
            .catch(err => {
                console.error('Error saving comment:', err);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            });
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay
        document.getElementById('user-card-modal').addEventListener('click', (e) => {
            if (e.target.id === 'user-card-modal') {
                closeUserCardModal();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeUserCardModal();
            }
        });
        
        function assignClient(clientId) {
            fetch('/api/users')
                .then(res => res.json())
                .then(users => {
                    const managers = users.filter(u => (u.role === 'fd_manager' || u.role === 'rd_manager') && u.is_active);
                    const select = document.createElement('select');
                    select.innerHTML = '<option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>' + 
                        managers.map(u => `<option value="${u.username}">${u.username} (${getRoleDisplayName(u.role)})</option>`).join('');
                    
                    const modal = document.createElement('div');
                    modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1000;';
                    modal.innerHTML = `
                        <div style="background: white; padding: 20px; border-radius: 8px; min-width: 300px;">
                            <h3>–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</h3>
                            <div style="margin: 15px 0;">${select.outerHTML}</div>
                            <button onclick="confirmAssign()" style="padding: 10px 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 25px; margin-right: 10px; cursor: pointer; font-weight: 500; transition: all 0.3s ease;">‚úì –ù–∞–∑–Ω–∞—á–∏—Ç—å</button>
                            <button onclick="closeAssignModal()" style="padding: 10px 20px; background: #6c757d; color: white; border: none; border-radius: 25px; cursor: pointer; font-weight: 500; transition: all 0.3s ease;">‚úñ –û—Ç–º–µ–Ω–∞</button>
                        </div>
                    `;
                    
                    document.body.appendChild(modal);
                    
                    window.confirmAssign = () => {
                        const selectedOperator = modal.querySelector('select').value;
                        fetch('/api/assign-client', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ client_id: clientId, operator: selectedOperator || null })
                        }).then(() => {
                            clients[clientId].assigned_to = selectedOperator || null;
                            renderClients();
                            closeAssignModal();
                        });
                    };
                    
                    window.closeAssignModal = () => {
                        document.body.removeChild(modal);
                    };
                });
        }

        // Load initial clients
        fetch('/api/clients')
            .then(res => res.json())
            .then(data => {
                if (Array.isArray(data)) {
                    data.forEach(client => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –§–î-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –µ–º—É
        // 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –†–î-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –µ–º—É
        // 4. –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏–∫–æ–º—É (–¥–ª—è –§–î-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
        if (user.role === 'admin' || 
            (user.role === 'fd_manager' && (client.assigned_to === user.username || !client.assigned_to)) ||
            (user.role === 'rd_manager' && client.assigned_to === user.username)) {
            clients[client.id] = client;
        }
                    });
                }
                renderClients();
                renderMessages();
            }).catch(err => {
                console.error('Error loading clients:', err);
                renderClients();
                renderMessages();
            });
    </script>
</body>
</html>
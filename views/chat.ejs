<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Чаты | CRM Система</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.2.0/css/adminlte.min.css">
  <style>
    .chat-container { height: calc(100vh - 56px); }
    .clients-sidebar { height: 100%; overflow-y: auto; }
    .client-item { padding: 15px; border-bottom: 1px solid #dee2e6; cursor: pointer; transition: background-color 0.2s; }
    .client-item:hover { background-color: #f8f9fa; }
    .client-item.active { background-color: #007bff; color: white; }
    .client-avatar { width: 40px; height: 40px; border-radius: 50%; background: #007bff; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; margin-right: 12px; }
    .client-info h6 { margin: 0; font-size: 14px; font-weight: 500; }
    .client-info small { color: #6c757d; font-size: 12px; }
    .client-item.active .client-info small { color: rgba(255,255,255,0.8); }
    .chat-area { height: 100%; display: flex; flex-direction: column; }
    .chat-header { padding: 15px 20px; background: white; border-bottom: 1px solid #dee2e6; }
    .messages-container { flex: 1; padding: 20px; overflow-y: auto; background: #f8f9fa; }
    .message { margin-bottom: 15px; display: flex; }
    .message.in { justify-content: flex-start; }
    .message.out { justify-content: flex-end; }
    .message-bubble { max-width: 70%; padding: 10px 15px; border-radius: 18px; position: relative; }
    .message.in .message-bubble { background: white; border: 1px solid #dee2e6; }
    .message.out .message-bubble { background: #007bff; color: white; }
    .message-time { font-size: 11px; opacity: 0.7; margin-top: 5px; }
    .input-area { padding: 15px 20px; background: white; border-top: 1px solid #dee2e6; }
    .no-chat { display: flex; align-items: center; justify-content: center; height: 100%; color: #6c757d; font-size: 18px; }
  </style>
</head>
<body class="hold-transition sidebar-mini layout-fixed">
<div class="wrapper">
  <!-- Navbar -->
  <nav class="main-header navbar navbar-expand navbar-white navbar-light">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
      </li>
      <li class="nav-item">
        <span class="navbar-text">Чаты с клиентами</span>
      </li>
    </ul>
    <ul class="navbar-nav ml-auto">
      <li class="nav-item dropdown">
        <a class="nav-link" data-toggle="dropdown" href="#">
          <i class="fas fa-user"></i> <span id="username-display"></span>
        </a>
        <div class="dropdown-menu dropdown-menu-right">
          <a href="/admin/dashboard" class="dropdown-item" id="admin-link" style="display: none;">
            <i class="fas fa-cogs mr-2"></i> Админ панель
          </a>
          <div class="dropdown-divider" id="admin-divider" style="display: none;"></div>
          <a href="/logout" class="dropdown-item">
            <i class="fas fa-sign-out-alt mr-2"></i> Выход
          </a>
        </div>
      </li>
    </ul>
  </nav>

  <!-- Main Sidebar -->
  <aside class="main-sidebar sidebar-dark-primary elevation-4">
    <a href="#" class="brand-link">
      <i class="fas fa-comments brand-image img-circle elevation-3" style="opacity: .8; margin-left: 10px;"></i>
      <span class="brand-text font-weight-light">Чаты</span>
    </a>

    <div class="sidebar">
      <div class="clients-sidebar">
        <div class="p-3">
          <div class="input-group">
            <input type="text" class="form-control form-control-sm" placeholder="Поиск клиентов..." id="search-clients">
            <div class="input-group-append">
              <span class="input-group-text"><i class="fas fa-search"></i></span>
            </div>
          </div>
        </div>
        <div id="clients-list"></div>
      </div>
    </div>
  </aside>

  <!-- Content Wrapper -->
  <div class="content-wrapper p-0">
    <div class="chat-container">
      <div class="chat-area" id="chat-area">
        <div class="no-chat">
          <div class="text-center">
            <i class="fas fa-comments fa-3x mb-3"></i>
            <h4>Выберите клиента</h4>
            <p class="text-muted">Выберите клиента из списка слева для начала общения</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- User Card Modal -->
<div class="modal fade" id="userCardModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Карточка клиента</h4>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body" id="user-card-content">
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.2.0/js/adminlte.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script>
// Проверка авторизации
const user = JSON.parse(localStorage.getItem('user') || 'null');
if (!user) {
  window.location.href = '/login';
}

// Отображение пользователя
document.getElementById('username-display').textContent = user.username;
if (user.role === 'admin') {
  document.getElementById('admin-link').style.display = 'block';
  document.getElementById('admin-divider').style.display = 'block';
}

const socket = io();
let currentClientId = null;
let clients = {};
let allClients = {};

// Socket events
socket.on('new_message', (data) => {
  const hasAccess = user.role === 'admin' || 
                   data.client_assigned_to === user.username || 
                   !data.client_assigned_to;
  
  if (!hasAccess) return;
  
  if (!clients[data.client_id]) {
    clients[data.client_id] = { 
      id: data.client_id, 
      name: data.client_name, 
      assigned_to: data.client_assigned_to,
      messages: [] 
    };
    renderClients();
  }
  
  if (!clients[data.client_id].messages) {
    clients[data.client_id].messages = [];
  }
  
  clients[data.client_id].messages.push(data.message);
  
  if (currentClientId === data.client_id) {
    renderMessages();
  }
  
  // Обновляем превью последнего сообщения
  updateClientPreview(data.client_id, data.message);
});

function selectClient(clientId) {
  currentClientId = clientId;
  
  // Обновляем активный элемент
  document.querySelectorAll('.client-item').forEach(el => el.classList.remove('active'));
  document.querySelector(`[data-client-id="${clientId}"]`)?.classList.add('active');
  
  // Показываем чат
  showChatArea(clientId);
  loadMessages(clientId);
}

function showChatArea(clientId) {
  const client = clients[clientId] || allClients[clientId];
  if (!client) return;
  
  const chatArea = document.getElementById('chat-area');
  chatArea.innerHTML = `
    <div class="chat-header">
      <div class="d-flex align-items-center">
        <div class="client-avatar mr-3">
          ${(client.name || 'U').charAt(0).toUpperCase()}
        </div>
        <div class="flex-grow-1">
          <h5 class="mb-0">${client.name || 'Неизвестный клиент'}</h5>
          <small class="text-muted">
            Telegram ${client.assigned_to ? '• Назначен: ' + client.assigned_to : ''}
          </small>
        </div>
        <button class="btn btn-outline-primary btn-sm" onclick="openUserCard(${clientId})">
          <i class="fas fa-user"></i> Карточка
        </button>
      </div>
    </div>
    <div class="messages-container" id="messages-container"></div>
    <div class="input-area">
      <div class="input-group">
        <input type="text" class="form-control" placeholder="Введите сообщение..." id="message-input">
        <div class="input-group-append">
          <button class="btn btn-outline-secondary" type="button" onclick="document.getElementById('file-input').click()">
            <i class="fas fa-paperclip"></i>
          </button>
          <button class="btn btn-primary" type="button" onclick="sendMessage()">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
      <input type="file" id="file-input" style="display: none;">
    </div>
  `;
  
  // Обработчики событий
  document.getElementById('message-input').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
  });
  
  document.getElementById('file-input').addEventListener('change', handleFileUpload);
}

function loadMessages(clientId) {
  fetch(`/api/messages/${clientId}`)
    .then(res => res.json())
    .then(messages => {
      if (Array.isArray(messages)) {
        clients[clientId] = clients[clientId] || {};
        clients[clientId].messages = messages;
      } else {
        clients[clientId] = clients[clientId] || {};
        clients[clientId].messages = [];
      }
      renderMessages();
    })
    .catch(err => {
      console.error('Error loading messages:', err);
      clients[clientId] = clients[clientId] || {};
      clients[clientId].messages = [];
      renderMessages();
    });
}

function renderMessages() {
  const container = document.getElementById('messages-container');
  if (!container || !currentClientId) return;
  
  const messages = clients[currentClientId]?.messages || [];
  
  container.innerHTML = messages.map(msg => {
    let content = msg.text || '';
    if (msg.file_url) {
      content += `<br><a href="${msg.file_url}" target="_blank" class="text-decoration-none">
        <i class="fas fa-file"></i> ${msg.file_name}
      </a>`;
    }
    
    return `
      <div class="message ${msg.direction}">
        <div class="message-bubble">
          <div>${content}</div>
          <div class="message-time">${new Date(msg.created_at).toLocaleString()}</div>
        </div>
      </div>
    `;
  }).join('');
  
  container.scrollTop = container.scrollHeight;
}

function renderClients() {
  const container = document.getElementById('clients-list');
  const clientsList = Object.values(clients);
  
  container.innerHTML = clientsList.map(client => `
    <div class="client-item" data-client-id="${client.id}" onclick="selectClient(${client.id})">
      <div class="d-flex align-items-center">
        <div class="client-avatar">
          ${(client.name || 'U').charAt(0).toUpperCase()}
        </div>
        <div class="client-info flex-grow-1">
          <h6>${client.name || 'Неизвестный клиент'}</h6>
          <small>
            Telegram ${client.assigned_to ? '• ' + client.assigned_to : ''}
          </small>
          <div class="clusters-display" style="margin-top: 5px;">
            ${getClientClustersHTML(client)}
          </div>
          <div class="last-message" id="preview-${client.id}"></div>
        </div>
      </div>
    </div>
  `).join('');
}

function updateClientPreview(clientId, message) {
  const previewEl = document.getElementById(`preview-${clientId}`);
  if (previewEl) {
    const text = message.text || (message.file_name ? `📁 ${message.file_name}` : '');
    const shortText = text.length > 30 ? text.substring(0, 30) + '...' : text;
    previewEl.innerHTML = `<small class="text-muted">${shortText}</small>`;
  }
}

function sendMessage() {
  const input = document.getElementById('message-input');
  const text = input.value.trim();
  if (!text || !currentClientId) return;
  
  fetch('/api/send', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ client_id: currentClientId, text, operator: user.username })
  }).then(() => {
    input.value = '';
    loadMessages(currentClientId);
  });
}

function handleFileUpload(e) {
  const file = e.target.files[0];
  if (file && currentClientId) {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('client_id', currentClientId);
    formData.append('operator', user.username);
    
    fetch('/api/send-file', {
      method: 'POST',
      body: formData
    }).then(() => {
      e.target.value = '';
      loadMessages(currentClientId);
    });
  }
}

function openUserCard(clientId) {
  fetch('/user-card-fragment')
    .then(res => res.text())
    .then(html => {
      document.getElementById('user-card-content').innerHTML = html;
      
      // Загружаем данные клиента
      Promise.all([
        fetch(`/api/clients`).then(r => r.json()),
        fetch(`/api/messages/${clientId}`).then(r => r.json())
      ]).then(([clientsData, messages]) => {
        const client = clientsData.find(c => c.id == clientId);
        if (client) {
          document.getElementById('modal-user-name').textContent = client.name || 'Неизвестный клиент';
          document.getElementById('modal-user-id').textContent = client.id;
          document.getElementById('modal-external-id').textContent = client.external_id;
          document.getElementById('modal-assigned-to').textContent = client.assigned_to || 'Не назначен';
          document.getElementById('modal-created-at').textContent = new Date(client.created_at).toLocaleString();
          document.getElementById('modal-user-comment').value = client.comment || '';
          
          // Загружаем кластеры
          let clusters = [];
          try {
            clusters = client.cluster ? JSON.parse(client.cluster) : [];
          } catch (e) {
            clusters = client.cluster ? [client.cluster] : [];
          }
          setClientClusters(clusters);
          
          const avatar = document.getElementById('modal-user-avatar');
          avatar.textContent = (client.name || 'U').charAt(0).toUpperCase();
        }
        
        if (Array.isArray(messages)) {
          const totalMessages = messages.length;
          const incomingMessages = messages.filter(m => m.direction === 'in').length;
          const outgoingMessages = messages.filter(m => m.direction === 'out').length;
          
          document.getElementById('modal-total-messages').textContent = totalMessages;
          document.getElementById('modal-incoming-messages').textContent = incomingMessages;
          document.getElementById('modal-outgoing-messages').textContent = outgoingMessages;
        }
      });
      
      $('#userCardModal').modal('show');
    });
}

function saveComment() {
  saveClientData();
}

function saveClientData() {
  const comment = document.getElementById('modal-user-comment').value.trim();
  const clusters = getSelectedClusters();
  
  Promise.all([
    fetch('/api/update-client-comment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ client_id: currentClientId, comment })
    }),
    fetch('/api/update-client-cluster', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ client_id: currentClientId, cluster: JSON.stringify(clusters) })
    })
  ])
  .then(responses => Promise.all(responses.map(r => r.json())))
  .then(results => {
    if (results.every(r => r.success)) {
      alert('Данные сохранены');
      if (clients[currentClientId]) {
        clients[currentClientId].comment = comment;
        clients[currentClientId].clusters = clusters;
      }
      renderClients();
    } else {
      alert('Ошибка при сохранении данных');
    }
  });
}

// Поиск клиентов
document.getElementById('search-clients').addEventListener('input', (e) => {
  const search = e.target.value.toLowerCase();
  document.querySelectorAll('.client-item').forEach(item => {
    const name = item.querySelector('.client-info h6').textContent.toLowerCase();
    item.style.display = name.includes(search) ? 'block' : 'none';
  });
});

function getClientClustersHTML(client) {
  let clusters = [];
  try {
    clusters = client.cluster ? JSON.parse(client.cluster) : [];
  } catch (e) {
    clusters = client.cluster ? [client.cluster] : [];
  }
  
  if (clusters.length === 0) return '';
  
  const colors = {
    'VIP': '#007bff',
    'Постоянный': '#28a745',
    'Новый': '#17a2b8',
    'Проблемный': '#dc3545',
    'Активный': '#ffc107'
  };
  
  return clusters.map(cluster => 
    `<span style="background: ${colors[cluster] || '#6c757d'}; color: white; padding: 2px 6px; border-radius: 8px; font-size: 10px; margin-right: 3px; display: inline-block;">${cluster}</span>`
  ).join('');
}

// Загрузка клиентов
fetch('/api/clients')
  .then(res => res.json())
  .then(data => {
    if (Array.isArray(data)) {
      data.forEach(client => {
        allClients[client.id] = client;
        if (user.role === 'admin' || 
            client.assigned_to === user.username || 
            !client.assigned_to) {
          clients[client.id] = client;
        }
      });
    }
    renderClients();
  })
  .catch(err => {
    console.error('Error loading clients:', err);
    renderClients();
  });
</script>
</body>
</html>
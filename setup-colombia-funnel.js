#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ö–æ–ª—É–º–±–∏—è Chicken Road...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
async function checkServer() {
  try {
    const response = await fetch('http://localhost:3001/api/automation-rules');
    return response.ok;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª
async function loadRules() {
  try {
    const schemaPath = path.join(__dirname, 'funnel-schemas', 'colombia-chicken-road.json');
    const schemaData = fs.readFileSync(schemaPath, 'utf8');
    const rules = JSON.parse(schemaData);
    
    console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º ${rules.length} –ø—Ä–∞–≤–∏–ª –≤–æ—Ä–æ–Ω–∫–∏...\n`);
    
    for (let i = 0; i < rules.length; i++) {
      const rule = rules[i];
      try {
        const response = await fetch('http://localhost:3001/api/automation-rules', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(rule)
        });
        
        const result = await response.json();
        if (result.success) {
          console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª–æ ${i + 1}/5: "${rule.name}" –∑–∞–≥—Ä—É–∂–µ–Ω–æ (ID: ${result.id})`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ ${i + 1}: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∞–≤–∏–ª–∞ ${i + 1}: ${error.message}`);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await sleep(100);
    }
    
    console.log('\nüéâ –í–æ—Ä–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
    console.log('\nüìù –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:');
    console.log('1. –°—Ç–∞—Ä—Ç ‚Üí 1—Å–º—Å (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞)');
    console.log('2. –û—Ç–≤–µ—Ç –Ω–∞ 1—Å–º—Å ‚Üí 2—Å–º—Å (–ø—Ä–∏ –ª—é–±–æ–º –æ—Ç–≤–µ—Ç–µ —Å —Ç–µ–≥–æ–º "1—Å–º—Å")');
    console.log('3. –û—Ç–≤–µ—Ç –Ω–∞ 2—Å–º—Å ‚Üí —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ø—Ä–∏ –ª—é–±–æ–º –æ—Ç–≤–µ—Ç–µ —Å —Ç–µ–≥–æ–º "2—Å–º—Å")');
    console.log('4. –ü—Ä–æ—à–µ–ª —Ä–µ–≥—É ‚Üí –¥–µ–º–æ (–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ "–ü—Ä–æ—à–µ–ª —Ä–µ–≥—É –ö–æ–ª—É–º–±–∏—è")');
    console.log('5. –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –§–î‚Üí–†–î (–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ "–ø–µ—Ä–µ—Ö–æ–¥_–∫_—Ä–¥")');
    console.log('\nüîß –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3001/admin/automation');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º—ã:', error.message);
  }
}

async function main() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...');
  
  let serverRunning = await checkServer();
  
  if (!serverRunning) {
    console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:');
    console.log('   npm start');
    console.log('   –∏–ª–∏');
    console.log('   node server.js');
    console.log('\n–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.');
    process.exit(1);
  }
  
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞...\n');
  await loadRules();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { loadRules, checkServer };